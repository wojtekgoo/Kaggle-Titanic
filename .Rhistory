# get number of missing values per column - result is named vector
na = sapply( df, function(x) sum(is.na(x)) )
# get index of cols with NAs
col_index = which(na > 0)
# keep only col names with NAs
col_names = col_names[col_index]
# add new col with %
na = data.frame(na)
na = na %>%
mutate('%NA' = round(na / obs * 100, 2)) %>%
filter(na > 0)
# add back row names
rownames(na) = col_names
colnames(na) = c("#NA", "%NA")
na
}
check_missing2 = function(df) {
temp = colSums(is.na(df))
print("% of observations missing")
round(temp[temp > 0] / nrow(df) * 100, 2)
}
# check missing values per column
check_missing(train)
# calc family size and add to data set
train$Family_size = train$SibSp + train$Parch
# Fare per person
train$Fare_pp = train$Fare / (train$Family_size + 1)
# check title frequencies and recode them to 4 main categories - this will be age proxy
table(train$Title)
train$new_titles = recode(train$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(train$new_titles)
# estimate missing age based on median of respective title
# 1. calculate median age per title
title_age_median = train %>%
group_by(new_titles) %>%
summarise(group_median = median(Age, na.rm = T))
title_age_median[title_age_median$new_titles == 'Master.', 2]
title_age_median[title_age_median$new_titles == 'Master.', 2] == 3.5
title_age_median[title_age_median$new_titles == 'Master.', 2] == 8
unique(train$new_titles)
train[is.na(train$Age)]
train[is.na(train$Age),]
train[is.na(train$Age),]$Age == title_age_median[title_age_median$new_titles == train$new_titles, 2]
train$Age
train[is.na(train$Age),]$age_all == title_age_median[title_age_median$new_titles == train$new_titles, 2]
train$age_all = ifelse(is.na(train$Age), title_age_median[match(title_age_median$new_titles, train$new_titles), 2], train$Age)
train$age_all
title_age_median[match(title_age_median$new_titles, 'Master.', 2]
title_age_median[match(title_age_median$new_titles, 'Master.'), 2]
title_age_median[match(title_age_median$new_titles, 'Master.')[1], 2]
title_age_median[match(title_age_median$new_titles, 'Miss.')[1], 2]
title_age_median[match('Miss.')[1], title_age_median$new_titles, 2]
title_age_median[match('Miss.', title_age_median$new_titles), 2]
train$age_all == NULL
names(train)
train$age_all = NULL
names(train)
train$age_all = ifelse(is.na(train$Age), title_age_median[title_age_median$new_titles = train$new_titles, 2], train$Age)
train$age_all = ifelse(is.na(train$Age), title_age_median[title_age_median$new_titles == train$new_titles, 2], train$Age)
train$age_all = ifelse(is.na(train$Age), title_age_median[title_age_median[1] == train$new_titles, 2], train$Age)
train$age_all
class(train$age_all)
class(train$Age)
train$age_all = as.numeric(train$age_all)
class(train$age_all)
train$age_all
train$Age
head(train$Age)
head(train$new_titles)
head(train$age_all)
train[is.na(Age)]$new_titles
train$new_titles[is.na(Age)]
train$new_titles[is.na(train$Age)]
train[train$age_all, train$new_titles][is.na(train$Age)]
subset(train, is.na(Age))
subset(train, is.na(Age), select = c("Age", "new_title", "age_all"))
subset(train, is.na(Age), select = c("Age", "new_titles", "age_all"))
title_age_median
train$age_all = ifelse(is.na(train$Age), title_age_median[title_age_median$new_title[train$new_titles], 2], train$Age)
train$age_all = ifelse(is.na(train$Age), title_age_median[title_age_median$new_titles[train$new_titles], 2], train$Age)
head(train$age_all)
train$age_all = ifelse(is.na(train$Age), match(train$new_titles, title_age_median[1]), train$Age)
head(train$age_all)
match(train$new_titles, title_age_median[1])
match(train$new_titles, title_age_median)
title_age_median[1]
head(train$new_titles)
train$new_titles[1]
train$new_titles[1] == title_age_median[1][4]
train$new_titles[1] == title_age_median[1, 4]
train$new_titles[1] == title_age_median[1]
title_age_median[3,1]
train$new_titles[1] == title_age_median[3, 1]
match(train$new_titles, title_age_median)
match(train$new_titles, title_age_median[1])
match(train$new_titles, title_age_median[2])
match(train$new_titles, title_age_median[4])
match(train$new_titles, title_age_median[])
match(train$new_titles, title_age_median)
head(train$new_titles)
title_age_median
match(train$new_titles, title_age_median$new_titles)
title_age_median[2]
title_age_median[1]
match(train$new_titles, title_age_median[1])
class(title_age_median[1])
class(title_age_median$new_titles)
match(train$new_titles, title_age_median$new_titles)
match(train$new_titles, title_age_median$new_titles)[2]
title_age_median[match(train$new_titles, title_age_median$new_titles), 2]
train$age_all = ifelse(is.na(train$Age), title_age_median[match(train$new_titles, title_age_median$new_titles), 2], train$Age)
head(train$age_all)
select(train, Age, new_titles, age_all)
apply(train, 1, ifelse(is.na(train$Age), title_age_median[match(train$new_titles, title_age_median$new_titles), 2], train$Age)
apply(train, 1, ifelse(is.na(train$Age), title_age_median[match(train$new_titles, title_age_median$new_titles), 2], train$Age))
apply(train$Age, 1, function(x) { ifelse(is.na(x), title_age_median[match(train$new_titles, title_age_median$new_titles), 2], x) })
foo = function(x) {
if(is.na(x$Age)) {
x$age_all = title_age_median[title_age_median$new_titles == x$new_titles, 2]
} else x$age_all = x$Age
}
foo(train)
apply(train, 1, foo(train))
train$age_all = NULL
apply(train, 1, foo(train))
train$age_all
names(train)
apply(train, 1, foo(train))
apply(train, 1, foo(train, train$Age))
title_age_median[title_age_median$new_titles == train$new_titles, 2]
title_age_median[match(train$new_titles, title_age_median$new_titles), 2]
ifelse(is.na(train$Age), title_age_median[match(train$new_titles, title_age_median$new_titles), 2], train$Age)
title_age_median[match(train$new_titles, title_age_median$new_titles), 2]
medians = title_age_median[match(train$new_titles, title_age_median$new_titles), 2]
ifelse(is.na(train$Age), medians, train$Age)
apply(is.na(train$Age), 1, function(x) medians(x))
apply(is.na(train$Age), 1, function(x) train$age_all == medians)
train[is.na(train$Age) == medians]
train$all_age = train$Age
train$all_age = ifelse(is.na(train$all_age), medians, train$Age))
train$all_age = ifelse(is.na(train$all_age), medians, train$Age)
train$all_age
medians
train$medians = medians
train$medians
train$all_age = ifelse(is.na(train$all_age), train$medians, train$all_age)
train$all_age
train$medians = as.numeric(medians)
trin$medians
train$medians
train$medians = as.numeric(unlist(medians))
train$medians
train$all_age = ifelse(is.na(train$all_age), train$medians, train$Age)
train$all_age
train$medians
is.na(train$all_age)
train$medians
train$Age
train$all_age
str(train)
train$all_age = ifelse(is.na(train$Age), train$medians, train$Age)
train$all_age
train$all_age=NULL
train$all_age = train$Age
train$all_age[is.na(train$Age)] = train$medians[is.na(train$Age)]
train$all_age
head(train$new_titles)
title_age_median
rm(medians)
# create list of median values for every title based on lookup against title_age_median
medians = title_age_median[match(train$new_titles, title_age_median$new_titles), 2]
class(medians)
ifelse(is.na(train$Age), as.numeric(medians), train$Age)
ifelse(is.na(train$Age), as.numeric(unlist(medians)), train$Age)
rm(list = ls())
library(dplyr)
library(readr)
# I added 'title' columns to the train set with passenger's titles extracted (using Excel)
# load 13 columns, ignore any other entries in the file
# 1 sposob
train = read_csv("train.csv")[, 1:13]
test = read_csv("test.csv")
# 2 sposob
# train_set = read_csv("train.csv", col_types = "iiiccniicncc")
check_missing = function(df) {
# look for missing values per column
obs = nrow(df)
col_names = names(df)
# get number of missing values per column - result is named vector
na = sapply( df, function(x) sum(is.na(x)) )
# get index of cols with NAs
col_index = which(na > 0)
# keep only col names with NAs
col_names = col_names[col_index]
# add new col with %
na = data.frame(na)
na = na %>%
mutate('%NA' = round(na / obs * 100, 2)) %>%
filter(na > 0)
# add back row names
rownames(na) = col_names
colnames(na) = c("#NA", "%NA")
na
}
check_missing2 = function(df) {
temp = colSums(is.na(df))
print("% of observations missing")
round(temp[temp > 0] / nrow(df) * 100, 2)
}
# check missing values per column
check_missing(train)
# calc family size and add to data set
train$Family_size = train$SibSp + train$Parch
# Fare per person
train$Fare_pp = train$Fare / (train$Family_size + 1)
# check title frequencies and recode them to 4 main categories - this will be age proxy
table(train$Title)
train$new_titles = recode(train$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(train$new_titles)
# estimate missing age based on median of respective title
# 1. calculate median age per title
title_age_median = train %>%
group_by(new_titles) %>%
summarise(group_median = median(Age, na.rm = T))
#2. Impute missing age values
impute_age = function(df) {
# create list of median values for every title based on lookup against title_age_median
medians = title_age_median[match(df$new_titles, title_age_median$new_titles), 2]
# 1 sposob
df$age_all = ifelse(is.na(df$Age), as.numeric(unlist(medians)), df$Age)
# 2 sposob
# df$age_all = df$Age
# df$age_all[is.na(df$Age)] = medians[is.na(df$Age)]
}
impute_age(train)
names(train)
impute_age = function(df) {
# create list of median values for every title based on lookup against title_age_median
medians = title_age_median[match(df$new_titles, title_age_median$new_titles), 2]
# 1 sposob
df$age_all = ifelse(is.na(df$Age), as.numeric(unlist(medians)), df$Age)
# 2 sposob
# df$age_all = df$Age
# df$age_all[is.na(df$Age)] = medians[is.na(df$Age)]
return(df)
}
impute_age(train)
names(train)
title_age_median = train %>%
group_by(new_titles) %>%
summarise(group_median = median(Age, na.rm = T))
#2. Impute missing age values
impute_age = function(df) {
# create list of median values for every title based on lookup against title_age_median
medians = title_age_median[match(df$new_titles, title_age_median$new_titles), 2]
# 1 sposob
df$age_all = ifelse(is.na(df$Age), as.numeric(unlist(medians)), df$Age)
# 2 sposob
# df$age_all = df$Age
# df$age_all[is.na(df$Age)] = medians[is.na(df$Age)]
}
train = impute_age(train)
train
rm(list = ls())
library(dplyr)
library(readr)
# I added 'title' columns to the train set with passenger's titles extracted (using Excel)
# load 13 columns, ignore any other entries in the file
# 1 sposob
train = read_csv("train.csv")[, 1:13]
test = read_csv("test.csv")
# 2 sposob
# train_set = read_csv("train.csv", col_types = "iiiccniicncc")
check_missing = function(df) {
# look for missing values per column
obs = nrow(df)
col_names = names(df)
# get number of missing values per column - result is named vector
na = sapply( df, function(x) sum(is.na(x)) )
# get index of cols with NAs
col_index = which(na > 0)
# keep only col names with NAs
col_names = col_names[col_index]
# add new col with %
na = data.frame(na)
na = na %>%
mutate('%NA' = round(na / obs * 100, 2)) %>%
filter(na > 0)
# add back row names
rownames(na) = col_names
colnames(na) = c("#NA", "%NA")
na
}
check_missing2 = function(df) {
temp = colSums(is.na(df))
print("% of observations missing")
round(temp[temp > 0] / nrow(df) * 100, 2)
}
# check missing values per column
check_missing(train)
# calc family size and add to data set
train$Family_size = train$SibSp + train$Parch
# Fare per person
train$Fare_pp = train$Fare / (train$Family_size + 1)
# check title frequencies and recode them to 4 main categories - this will be age proxy
table(train$Title)
train$new_titles = recode(train$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(train$new_titles)
# estimate missing age based on median of respective title
# 1. calculate median age per title
title_age_median = train %>%
group_by(new_titles) %>%
summarise(group_median = median(Age, na.rm = T))
#2. Impute missing age values
impute_age = function(df) {
# create list of median values for every title based on lookup against title_age_median
medians = title_age_median[match(df$new_titles, title_age_median$new_titles), 2]
# 1 sposob
df$age_all = ifelse(is.na(df$Age), as.numeric(unlist(medians)), df$Age)
# 2 sposob
# df$age_all = df$Age
# df$age_all[is.na(df$Age)] = medians[is.na(df$Age)]
return(df)
}
train = impute_age(train)
names(train)
is.na(train$age_all)
sum(is.na(train$age_all))
lm_formula = Survived ~ all_age + Sex + Pclass + Family_size
model = lm(lm_formula, data = train)
str(train)
lm_formula = Survived ~ age_all + Sex + Pclass + Family_size
model = lm(lm_formula, data = train)
pred = predict(model, newdata = test)
model = lm(lm_formula, data = train)
test = impute_age(test)
names(test)
names(test)
test$age_all
rm(list = ls())
library(dplyr)
library(readr)
# I added 'title' columns to the train set with passenger's titles extracted (using Excel)
# load 13 columns, ignore any other entries in the file
# 1 sposob
train = read_csv("train.csv")[, 1:13]
test = read_csv("test.csv")
# 2 sposob
# train_set = read_csv("train.csv", col_types = "iiiccniicncc")
check_missing = function(df) {
# look for missing values per column
obs = nrow(df)
col_names = names(df)
# get number of missing values per column - result is named vector
na = sapply( df, function(x) sum(is.na(x)) )
# get index of cols with NAs
col_index = which(na > 0)
# keep only col names with NAs
col_names = col_names[col_index]
# add new col with %
na = data.frame(na)
na = na %>%
mutate('%NA' = round(na / obs * 100, 2)) %>%
filter(na > 0)
# add back row names
rownames(na) = col_names
colnames(na) = c("#NA", "%NA")
na
}
check_missing2 = function(df) {
temp = colSums(is.na(df))
print("% of observations missing")
round(temp[temp > 0] / nrow(df) * 100, 2)
}
# check missing values per column
check_missing(train)
# calc family size and add to data set
train$Family_size = train$SibSp + train$Parch
# Fare per person
train$Fare_pp = train$Fare / (train$Family_size + 1)
# check title frequencies and recode them to 4 main categories - this will be age proxy
recode_titles = function(df) {
table(df$Title)
df$new_titles = recode(df$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(df$new_titles)
}
train = recode_titles(train)
test = recode_titles(test)
# estimate missing age based on median of respective title
# 1. calculate median age per title
title_age_median = train %>%
group_by(new_titles) %>%
summarise(group_median = median(Age, na.rm = T))
#2. Impute missing age values
impute_age = function(df) {
# create list of median values for every title based on lookup against title_age_median
medians = title_age_median[match(df$new_titles, title_age_median$new_titles), 2]
# 1 sposob
df$age_all = ifelse(is.na(df$Age), as.numeric(unlist(medians)), df$Age)
# 2 sposob
# df$age_all = df$Age
# df$age_all[is.na(df$Age)] = medians[is.na(df$Age)]
return(df)
}
train = impute_age(train)
test = impute_age(test)
names(test)
recode_titles = function(df) {
table(df$Title)
df$new_titles = recode(df$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(df$new_titles)
}
train = recode_titles(train)
test = recode_titles(test)
table(train$Title)
names(train)
train = read_csv("train.csv")[, 1:13]
test = read_csv("test.csv")
table(train$Title)
recode_titles = function(df) {
table(df$Title)
df$new_titles = recode(df$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(df$new_titles)
}
recode_titles = function(df) {
table(df$Title)
df$new_titles = recode(df$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(df$new_titles)
return(df)
}
train = recode_titles(train)
test = recode_titles(test)
train
test
test = read_csv("test.csv")
test
# 1 sposob
train = read_csv("train.csv")[, 1:13]
test = read_csv("test.csv")
train$Family_size = train$SibSp + train$Parch
test$Family_size = test$SibSp + test$Parch
# Fare per person
train$Fare_pp = train$Fare / (train$Family_size + 1)
test$Fare_pp = test$Fare / (test$Family_size + 1)
# check title frequencies and recode them to 4 main categories - this will be age proxy
recode_titles = function(df) {
table(df$Title)
df$new_titles = recode(df$Title, Capt. = "Mr.", Col. = "Mr.", Don. = "Mr.", Rev. = "Mr.", Dr. = "Mr.", Mme. = "Mrs.", Ms. = "Mrs.", Major. = "Mr.",
Lady. = "Mrs.", Sir. = "Mr.", Mlle. = "Mr.", Col. = "Mr.", Capt. = "Mr.", "the Countess." = "Mrs.", Jonkheer. = "Mr.")
table(df$new_titles)
return(df)
}
train = recode_titles(train)
test = recode_titles(test)
title_age_median = train %>%
group_by(new_titles) %>%
summarise(group_median = median(Age, na.rm = T))
impute_age = function(df) {
# create list of median values for every title based on lookup against title_age_median
medians = title_age_median[match(df$new_titles, title_age_median$new_titles), 2]
# 1 sposob
df$age_all = ifelse(is.na(df$Age), as.numeric(unlist(medians)), df$Age)
# 2 sposob
# df$age_all = df$Age
# df$age_all[is.na(df$Age)] = medians[is.na(df$Age)]
return(df)
}
train = impute_age(train)
test = impute_age(test)
lm_formula = Survived ~ age_all + Sex + Pclass + Family_size
model = lm(lm_formula, data = train)
test$pred = predict(model, newdata = test)
test
write.csv(file = "TitanicPred-lm", x = select(test, PassengerId, pred))
write.csv(file = "TitanicPred-lm.csv", x = select(test, PassengerId, pred))
model = glm(lm_formula, family = "binomial", data = train)
test$pred = predict(model, newdata = test, type = "response")
test$pred = ifelse(test$pred >=0.5, 1, 0)
write.csv(file = "TitanicPred-logit.csv", x = select(test, PassengerId, pred))
test$Survived = predict(model, newdata = test, type = "response")
test$Survived= ifelse(test$pred >= 0.5, 1, 0)
write.csv(file = "TitanicPred-logit.csv", x = select(test, PassengerId, pred))
test$Survived = predict(model, newdata = test, type = "response")
test$Survived= ifelse(test$Survived >= 0.5, 1, 0)
write.csv(file = "TitanicPred-logit.csv", x = select(test, PassengerId, Survived))
test$all_age
test$age_all
logit_formula = Survived ~ age_all + Sex + Pclass + Family_size + Pclass:Sex
model = glm(lm_formula, family = "binomial", data = train)
summary(model)
names(test)
test$pred = NULL
logit_formula = Survived ~ age_all + Sex + Pclass + Family_size + Pclass:Sex + new_titles + Fare_pp
model = glm(lm_formula, family = "binomial", data = train)
test$Survived = predict(model, newdata = test, type = "response")
test$Survived= ifelse(test$Survived >= 0.5, 1, 0)
summary(model)
model
summary(model)
write.csv(file = "TitanicPred-logit.csv", x = select(test, PassengerId, Survived))
logit_formula = Survived ~ I(age_all^2) + Sex + Pclass + Family_size + Pclass:Sex + new_titles + Fare_pp
model = glm(lm_formula, family = "binomial", data = train)
test$Survived = predict(model, newdata = test, type = "response")
test$Survived= ifelse(test$Survived >= 0.5, 1, 0)
write.csv(file = "TitanicPred-logit.csv", x = select(test, PassengerId, Survived))
